{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\Food-Ordering\\\\src\\\\Components\\\\Meals\\\\AvailableMeals.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport classes from './AvailableMeals.module.css';\nimport Card from '../UI/Card';\nimport MealItem from './MealItem/MealItem'; // const DUMMY_MEALS = [\n//     {\n//         id: 'm1',\n//         name: 'Sushi',\n//         description: 'Finest fish and veggies',\n//         price: 22.99,\n//     },\n//     {\n//         id: 'm2',\n//         name: 'Schnitzel',\n//         description: 'A german specialty!',\n//         price: 16.5,\n//     },\n//     {\n//         id: 'm3',\n//         name: 'Barbecue Burger',\n//         description: 'American, raw, meaty',\n//         price: 12.99,\n//     },\n//     {\n//         id: 'm4',\n//         name: 'Green Bowl',\n//         description: 'Healthy...and green...',\n//         price: 18.99,\n//     },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AvailableMeals = () => {\n  _s();\n\n  const [meals, setMeals] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [httpError, setHttpError] = useState();\n\n  const fetchData = async () => {\n    try {\n      setIsLoading(true);\n      const response = await fetch('https://custom-hooks-26f46-default-rtdb.firebaseio.com/meals');\n      console.log(response);\n\n      if (!response.ok) {\n        console.log(\"dddd\");\n        throw new Error(\"Something went Wrong!!\");\n      }\n\n      const responseData = await response.json();\n      const loadedMeals = [];\n\n      for (const key in responseData) {\n        loadedMeals.push({\n          id: key,\n          name: responseData[key].name,\n          description: responseData[key].description,\n          price: responseData[key].price\n        });\n      }\n\n      console.log(loadedMeals);\n      setMeals(loadedMeals);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      console.log(error);\n      setHttpError(error.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const mealItems = meals.map(meal => {\n    return /*#__PURE__*/_jsxDEV(MealItem, {\n      meal: meal\n    }, meal.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  });\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.isLoading,\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (httpError) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: classes.mealsError,\n        children: httpError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.meals,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: mealItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AvailableMeals, \"Bodb5EJzg1lGSKX/9cXe9nVT0aA=\");\n\n_c = AvailableMeals;\nexport default AvailableMeals;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailableMeals\");","map":{"version":3,"sources":["C:/React/Food-Ordering/src/Components/Meals/AvailableMeals.js"],"names":["useState","useEffect","classes","Card","MealItem","AvailableMeals","meals","setMeals","isLoading","setIsLoading","httpError","setHttpError","fetchData","response","fetch","console","log","ok","Error","responseData","json","loadedMeals","key","push","id","name","description","price","error","message","mealItems","map","meal","mealsError"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport classes from './AvailableMeals.module.css';\r\nimport Card from '../UI/Card';\r\n\r\nimport MealItem from './MealItem/MealItem';\r\n\r\n// const DUMMY_MEALS = [\r\n//     {\r\n//         id: 'm1',\r\n//         name: 'Sushi',\r\n//         description: 'Finest fish and veggies',\r\n//         price: 22.99,\r\n//     },\r\n//     {\r\n//         id: 'm2',\r\n//         name: 'Schnitzel',\r\n//         description: 'A german specialty!',\r\n//         price: 16.5,\r\n//     },\r\n//     {\r\n//         id: 'm3',\r\n//         name: 'Barbecue Burger',\r\n//         description: 'American, raw, meaty',\r\n//         price: 12.99,\r\n//     },\r\n//     {\r\n//         id: 'm4',\r\n//         name: 'Green Bowl',\r\n//         description: 'Healthy...and green...',\r\n//         price: 18.99,\r\n//     },\r\n// ];\r\n\r\nconst AvailableMeals = () => {\r\n    const [meals, setMeals] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [httpError, setHttpError] = useState();\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await fetch('https://custom-hooks-26f46-default-rtdb.firebaseio.com/meals');\r\n            console.log(response);\r\n            if (!response.ok) {\r\n                console.log(\"dddd\");\r\n                throw new Error(\"Something went Wrong!!\");\r\n            }\r\n\r\n            const responseData = await response.json();\r\n\r\n            const loadedMeals = [];\r\n\r\n            for (const key in responseData) {\r\n                loadedMeals.push({\r\n                    id: key,\r\n                    name: responseData[key].name,\r\n                    description: responseData[key].description,\r\n                    price: responseData[key].price\r\n                });\r\n            }\r\n\r\n            console.log(loadedMeals);\r\n            setMeals(loadedMeals);\r\n            setIsLoading(false);\r\n        } catch (error) {\r\n\r\n            setIsLoading(false);\r\n            console.log(error);\r\n            setHttpError(error.message);\r\n\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        fetchData()\r\n\r\n    }, []);\r\n\r\n    const mealItems = meals.map((meal) => {\r\n        return (\r\n            <MealItem key={meal.id} meal={meal} />\r\n        );\r\n    });\r\n\r\n    if (isLoading) {\r\n        return <section>\r\n            <p className={classes.isLoading}>Loading...</p>\r\n        </section>\r\n    }\r\n    if (httpError) {\r\n        return <section>\r\n            <p className={classes.mealsError}>{httpError}</p>\r\n        </section>\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.meals}>\r\n            <ul>\r\n                {mealItems}\r\n            </ul>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default AvailableMeals;"]},"metadata":{},"sourceType":"module"}